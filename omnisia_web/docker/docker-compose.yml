version: '3.8'

# ============================================================================
# OMNISIA TRAINER WEB - DOCKER COMPOSE COMPLETO
# COMPLETE DOCKER COMPOSE FOR OMNISIA TRAINER WEB
# ============================================================================

networks:
  omnisia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Dados persistentes / Persistent data
  postgres_data:
  mongo_data:
  redis_data:
  prometheus_data:
  grafana_data:
  jupyter_data:
  
  # Dados da aplicação / Application data
  omnisia_data:
  omnisia_models:
  omnisia_uploads:
  omnisia_logs:

services:
  # ============================================================================
  # APLICAÇÃO PRINCIPAL / MAIN APPLICATION
  # ============================================================================
  
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    container_name: omnisia-backend
    restart: unless-stopped
    ports:
      - "${DOCKER_BACKEND_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql://omnisia:omnisia123@postgres:5432/omnisia
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://omnisia:omnisia123@mongo:27017/omnisia
      - ENABLE_POSTGRES=true
      - ENABLE_REDIS=true
      - ENABLE_MONGODB=true
      - PROMETHEUS_ENABLED=true
      - GRAFANA_ENABLED=true
      - JUPYTER_ENABLED=true
    volumes:
      - omnisia_data:/app/data
      - omnisia_models:/app/data/models
      - omnisia_uploads:/app/data/uploads
      - omnisia_logs:/app/logs
      - ../notebooks:/app/notebooks
    depends_on:
      - postgres
      - redis
      - mongo
    networks:
      - omnisia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    container_name: omnisia-frontend
    restart: unless-stopped
    ports:
      - "${DOCKER_FRONTEND_PORT:-8501}:8501"
    environment:
      - API_URL=http://backend:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    volumes:
      - omnisia_logs:/app/logs
    depends_on:
      - backend
    networks:
      - omnisia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # BANCOS DE DADOS / DATABASES
  # ============================================================================
  
  postgres:
    image: postgres:16-alpine
    container_name: omnisia-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: omnisia
      POSTGRES_USER: omnisia
      POSTGRES_PASSWORD: omnisia123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init_database.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - omnisia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U omnisia -d omnisia"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:7-jammy
    container_name: omnisia-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: omnisia
      MONGO_INITDB_ROOT_PASSWORD: omnisia123
      MONGO_INITDB_DATABASE: omnisia
    volumes:
      - mongo_data:/data/db
      - ../scripts/init_mongo.js:/docker-entrypoint-initdb.d/init.js
    networks:
      - omnisia-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: omnisia-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - omnisia-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # JUPYTER NOTEBOOK
  # ============================================================================
  
  jupyter:
    image: jupyter/tensorflow-notebook:latest
    container_name: omnisia-jupyter
    restart: unless-stopped
    ports:
      - "${DOCKER_JUPYTER_PORT:-8888}:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=omnisia123
      - GRANT_SUDO=yes
    volumes:
      - jupyter_data:/home/jovyan/work
      - ../notebooks:/home/jovyan/omnisia_notebooks
      - omnisia_data:/home/jovyan/data
      - omnisia_models:/home/jovyan/models
    user: root
    networks:
      - omnisia-network
    command: >
      bash -c "
        pip install -r /home/jovyan/omnisia_notebooks/requirements.txt &&
        start-notebook.sh --NotebookApp.token='omnisia123' --NotebookApp.password='' --NotebookApp.allow_root=True
      "

  # ============================================================================
  # MONITORAMENTO / MONITORING
  # ============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: omnisia-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ../config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - omnisia-network

  grafana:
    image: grafana/grafana:latest
    container_name: omnisia-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=omnisia123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ../config/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - omnisia-network

  # ============================================================================
  # PROXY REVERSO / REVERSE PROXY
  # ============================================================================
  
  nginx:
    image: nginx:alpine
    container_name: omnisia-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../config/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
      - jupyter
      - grafana
    networks:
      - omnisia-network

  # ============================================================================
  # UTILITÁRIOS / UTILITIES
  # ============================================================================
  
  # Backup automático
  backup:
    image: alpine:latest
    container_name: omnisia-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Todo dia às 2h
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=omnisia
      - POSTGRES_USER=omnisia
      - POSTGRES_PASSWORD=omnisia123
    volumes:
      - omnisia_data:/data
      - ../backups:/backups
      - ../scripts/backup.sh:/backup.sh
    command: >
      sh -c "
        apk add --no-cache postgresql-client mongodb-tools cron &&
        chmod +x /backup.sh &&
        echo '0 2 * * * /backup.sh' | crontab - &&
        crond -f
      "
    depends_on:
      - postgres
      - mongo
    networks:
      - omnisia-network

  # Monitoramento de logs
  loki:
    image: grafana/loki:latest
    container_name: omnisia-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ../config/loki/loki.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - omnisia-network

  promtail:
    image: grafana/promtail:latest
    container_name: omnisia-promtail
    restart: unless-stopped
    volumes:
      - omnisia_logs:/var/log/omnisia
      - ../config/promtail/promtail.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - omnisia-network

  # ============================================================================
  # SERVIÇOS EXTERNOS OPCIONAIS / OPTIONAL EXTERNAL SERVICES
  # ============================================================================
  
  # MinIO (S3 compatível)
  minio:
    image: minio/minio:latest
    container_name: omnisia-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: omnisia
      MINIO_ROOT_PASSWORD: omnisia123
    volumes:
      - ../data/minio:/data
    command: server /data --console-address ":9001"
    networks:
      - omnisia-network
    profiles: ["storage"]

  # Elasticsearch (para busca avançada)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: omnisia-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ../data/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - omnisia-network
    profiles: ["search"]

  # Kibana (dashboard para Elasticsearch)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: omnisia-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - omnisia-network
    profiles: ["search"]

  # ============================================================================
  # HEALTHCHECK GLOBAL / GLOBAL HEALTHCHECK
  # ============================================================================
  
  healthcheck:
    image: alpine:latest
    container_name: omnisia-healthcheck
    restart: unless-stopped
    volumes:
      - ../scripts/healthcheck.sh:/healthcheck.sh
    command: >
      sh -c "
        apk add --no-cache curl &&
        chmod +x /healthcheck.sh &&
        while true; do
          /healthcheck.sh
          sleep 30
        done
      "
    depends_on:
      - backend
      - frontend
      - postgres
      - redis
      - mongo
    networks:
      - omnisia-network

# ============================================================================
# CONFIGURAÇÕES ADICIONAIS / ADDITIONAL CONFIGURATIONS
# ============================================================================

# Para usar perfis específicos:
# docker-compose --profile storage up  # Inclui MinIO
# docker-compose --profile search up   # Inclui Elasticsearch/Kibana
# docker-compose --profile all up      # Todos os serviços

# Comandos úteis:
# docker-compose up -d                 # Subir em background
# docker-compose logs -f backend       # Ver logs do backend
# docker-compose exec backend bash     # Entrar no container
# docker-compose down -v               # Parar e remover volumes
# docker-compose restart backend       # Reiniciar serviço específico
