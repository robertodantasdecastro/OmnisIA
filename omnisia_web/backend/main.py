import logging
import os
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import time

from .config import (
    VERSION,
    AUTHOR,
    EMAIL,
    ALLOWED_HOSTS,
    LOGS_DIR,
    LOG_LEVEL,
    ENABLE_DEBUG,
    DEVELOPMENT_MODE,
    get_logs_path,
    API_HOST,
    API_PORT,
)
from .routers import upload, preprocess, train, chat


# Configura√ß√£o de logging
def setup_logging():
    """Configura o sistema de logging"""
    log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

    # Cria diret√≥rio de logs se n√£o existir
    get_logs_path().mkdir(parents=True, exist_ok=True)

    # Configura√ß√£o b√°sica
    logging.basicConfig(
        level=getattr(logging, LOG_LEVEL.upper()),
        format=log_format,
        handlers=[
            logging.FileHandler(get_logs_path() / "backend.log"),
            logging.StreamHandler(),
        ],
    )

    # Logger espec√≠fico da aplica√ß√£o
    logger = logging.getLogger("omnisia")
    return logger


# Configura√ß√£o de startup/shutdown
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o"""
    logger = logging.getLogger("omnisia")
    logger.info("üöÄ Iniciando OmnisIA Trainer Web Backend")
    logger.info(f"üì¶ Vers√£o: {VERSION}")
    logger.info(f"üë®‚Äçüíª Autor: {AUTHOR} ({EMAIL})")
    logger.info(f"üîß Modo Debug: {ENABLE_DEBUG}")
    logger.info(f"üèóÔ∏è Modo Desenvolvimento: {DEVELOPMENT_MODE}")
    
    # Inicializa√ß√£o do timestamp de startup
    app.state.start_time = time.time()
    logger.info("‚úÖ Backend inicializado com sucesso")

    yield

    logger.info("üõë Encerrando OmnisIA Trainer Web Backend")
    logger.info("‚úÖ Backend encerrado com sucesso")


# Inicializa√ß√£o do logging
logger = setup_logging()

# Cria√ß√£o da aplica√ß√£o FastAPI
app = FastAPI(
    title="OmnisIA Trainer Web API",
    description="API para treinamento e processamento de IA com LoRA",
    version=VERSION,
    contact={
        "name": AUTHOR,
        "email": EMAIL,
    },
    lifespan=lifespan,
    debug=ENABLE_DEBUG,
)

# Middleware de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=(
        ["*"]
        if DEVELOPMENT_MODE
        else ["http://localhost:8501", "http://127.0.0.1:8501", "http://frontend:8501"]
    ),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Middleware de hosts confi√°veis
if not DEVELOPMENT_MODE:
    app.add_middleware(TrustedHostMiddleware, allowed_hosts=ALLOWED_HOSTS)


# Middleware de logging de requisi√ß√µes
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Middleware para logging de requisi√ß√µes"""
    start_time = time.time()

    # Processa a requisi√ß√£o
    response = await call_next(request)

    # Calcula tempo de processamento
    process_time = time.time() - start_time

    # Log da requisi√ß√£o
    logger.info(
        f"{request.method} {request.url.path} - "
        f"Status: {response.status_code} - "
        f"Tempo: {process_time:.3f}s - "
        f"Cliente: {request.client.host if request.client else 'unknown'}"
    )

    return response


# Tratamento global de exce√ß√µes
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Tratamento global de exce√ß√µes"""
    logger.error(f"Erro n√£o tratado: {str(exc)}", exc_info=True)

    if DEVELOPMENT_MODE:
        return JSONResponse(
            status_code=500,
            content={
                "detail": f"Erro interno do servidor: {str(exc)}",
                "type": type(exc).__name__,
                "path": str(request.url.path),
            },
        )
    else:
        return JSONResponse(
            status_code=500, content={"detail": "Erro interno do servidor"}
        )


# Inclus√£o dos routers
app.include_router(upload.router, prefix="/upload", tags=["upload"])
app.include_router(preprocess.router, prefix="/preprocess", tags=["preprocess"])
app.include_router(train.router, prefix="/train", tags=["train"])
app.include_router(chat.router, prefix="/chat", tags=["chat"])


# Endpoints principais
@app.get("/")
async def root():
    """Endpoint raiz da API"""
    return {
        "message": "OmnisIA Trainer Web API",
        "version": VERSION,
        "author": AUTHOR,
        "status": "online",
        "docs": "/docs",
        "health": "/health",
    }


@app.get("/health")
async def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de"""
    return {
        "status": "healthy",
        "version": VERSION,
        "timestamp": time.time(),
        "uptime": (
            time.time() - app.state.start_time
            if hasattr(app.state, "start_time")
            else 0
        ),
    }


@app.get("/info")
async def get_info():
    """Endpoint com informa√ß√µes da aplica√ß√£o"""
    return {
        "name": "OmnisIA Trainer Web API",
        "version": VERSION,
        "author": AUTHOR,
        "email": EMAIL,
        "debug": ENABLE_DEBUG,
        "development": DEVELOPMENT_MODE,
        "endpoints": [
            "/upload - Gerenciamento de arquivos",
            "/preprocess - Processamento (OCR, STT, etc.)",
            "/train - Treinamento de modelos LoRA",
            "/chat - Sistema de chat com contexto",
        ],
    }


# Execu√ß√£o do servidor
if __name__ == "__main__":
    import uvicorn
    
    logger.info(f"üöÄ Iniciando servidor na porta {API_PORT}")
    uvicorn.run(
        "backend.main:app",
        host=API_HOST,
        port=API_PORT,
        reload=DEVELOPMENT_MODE,
        log_level=LOG_LEVEL.lower(),
    )
